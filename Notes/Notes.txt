

Variable Conventions

# valid names

numOfBoxes = 7
_num_of_boxes = 10 # this is a different variable than numOfBoxes
_NUM_OF_BOXES = 15 # a different variable as names are case sensitive
ownerName = “Atif"
ownerName2 = “Muneeba" # different, valid variable

# invalid names
2ownerName = “Saeeda" # cannot start with number.
# Only letter or underscore in the beginning
owner-name = “Bilal" # no hypen
owner name = “Umer" # no space allowed
# only alpha numeric and underscore

---------------------------------------------------------------------------------------------------------
#operator precedence
#PEMDAS (Parentheses->Power->Multiplication->Addition->Left to Right)
---------------------------------------------------------------------------------------------------------
#Random lib

import random
a = random.randint(1,7) # 1 and 7 are included
b = random.randrange(1,3) # 3 is not included
c = random.random() # floating point between 0.0 and 1.0 where 1.0 is not included
print(a, b, c)
j = [1,2,3,4]
x = random.choice(j) # Gives a random value
random.shuffle(j) #random.shuffle() shuffles the list, doesn't return anything
print(x)
print(j)
random.seed(42) #used to replicate same results
def print_random():
    for i in range(5):
        print(random.randint(1,100))
print_random()
---------------------------------------------------------------------------------------------------------
There are four collection data types in the Python programming
language:
1) List is a collection which is ordered and changeable. Allows duplicate
members.
2)Tuple is a collection which is ordered and unchangeable. Allows
duplicate members.
3)Set is a collection which is unordered and unindexed. No duplicate
members.
4)Dictionary is a collection which is ordered* and changeable. No
duplicate members.
Array functions
---------------------------------------------------------------------------------------------------------
import array
#arrayName = array.array(type code for data type, [array items])
abc = array.array('d', [2.5, 4.9, 6.7]) # 'd' is a type code
print(abc)
abc.insert(1, 6.2) #arrayName.insert(index, value)
print(abc)
balance = array.array('i', [300, 200, 100])
print(balance[1])
balance.append(50) #adds another element to array after last index
print(balance)
balance.extend([30, 20, 10]) #more than 1 element can be appended
print(balance)
print(balance)
xyz= array.array('q',[3,9,6,5,20,13,19,22,30,25])
print(xyz[1:4])
print(xyz[7:10])
---------------------------------------------------------------------
import array as myarr
first = myarr.array('b', [4,6,8])
second = myarr.array('b', [9, 12, 15])
numbers = first + second #concatenating two arrays
print(numbers)
numbers.pop(2) #pop functions name index number as argument to delete it
numbers.remove(12) #remove function takes value to be removed as argument
print(numbers)
clear() = Removes all the elements from the list
copy() = Returns a copy of the list
count() = Returns the number of elements with the specified value
index() = Returns the index of the first element with the specified value
reverse() = Reverses the order of the list
sort() = Sorts the list ins ascending order
---------------------------------------------------------------------------------------------------------
Dict functions

thisdict = {
"brand": "Toyota",
"model": "Grande",
"year": 2021
}
print(thisdict.keys())  #returns list of the keys
print(thisdict.values()) #returns list of values
print(thisdict.items()) #dict_items([('name', 'faisal'), ('age', 25), ('university','fast')])

#looping through dict
for key, value in thisdict.items():
    print(f"The value of {key} is {value}")

a = {"name": "faisal","age":25,"university":"fast"}
b = {"name" : "javed"} #if dict is updated with a key-value pair with a key that already exists in the dict, it will be modified
a.update(b)  #The update() method inserts the specified items to the dictionary. The specified items can be a dictionary, or an iterable object with key value pairs.
a.update({"ID": '0055'})
print(a)
a.popitem() #last key value pair is removed

#enumerate function
lst = ['a', 'b', 'c', 'd']
for index, element in enumerate(lst):
    print(index, element)
dict = {1:'a', 2:'b', 3:'c', 4:'d'}
print("\n")
for i,k in enumerate(dict): #enumerate keys of dictionary
    print(i,k) #i = index, k = keys
print("\n")
#enumerate key value:
for i, (k,v) in enumerate(dict.items()):
    print(i,k,v)

---------------------------------------------------------------------------------------------------------
tuple functions

tuple1 = ("apple",) #tuple since it has a comma with single value
print(type(tuple1))
tuple2 = ("apple") #this is a str since no comma
print(type(tuple2))
a = (12,6,-10,'fast')
b = (45,89)
c = (a,b) #tuple consisting of 2 tuples
print(c[0])
print(c)
print(len(c))
#tuples are immutable, to change values, convert to list and back into tuple
x=('a', 'b', 'c')
y=list(x)
y[1] = 'd'
x = tuple(y)
print(x)

---------------------------------------------------------------------------------------------------------
Colllections functions

from collections import Counter
from collections import ChainMap

x = lambda a : a + 10
print(x(5))
x = lambda a, b : a * b
print(x(5, 6))

a = [1,1,1,2,2,23,4,3,2,4,5,6,7,86,5,4,0,0,0,0,0,0,0,0]
c = Counter(a)
print(c)
print(c.most_common())
c.subtract({0:2, 86:1})
print(c)
a = {1:'fast', 2:'iba'}
b = {3:'landhi',4:'johar'}
c = ChainMap(a,b) #dict like It is dictionary like class for creating a single view of multiple mapping. It encapsulates many dictionaries into one
print(c)
---------------------------------------------------------------------------------------------------------
(OOP) 


class Circle:
    pi = 3.14
    def __init__(self,radius):
        self.radius = radius
    def calc_circumference(self):
            return 2*Circle.pi*self.radius
c = Circle(4)
print(c.calc_circumference())

#method overloading
class Area:
    def fine_area(selfself, a=None, b=None):
        if a!=None and b!=None:
            print(a*b)
        elif a!=None:
            print(a**2)
        else:
            print("nothing")

obj1 = Area()
obj1.fine_area()
obj1.fine_area(10)
obj1.fine_area(10, 20)

#method overriding
class A:
    def showData(self):
        print("I am in A")
class B(A):
    def showData(self):
        print("I am in B")
obj = B()
obj.showData()

#super function (used to call parent constructor in child class)
class Father:
    def __init__(self):
        print("father constructor")
    def show(self):
        print("father instance")
class Son(Father):
    def __init__(self):
        super().__init__()
        print("Son constructor")
    def show(self):
        print("son instance")
s = Son()

#single inheritance

class Animal():
    def __init__(self):
        print("animal created")
    def who_am_i(self):
        print("i am an animal")
    def eat(self):
        print("eating")

class Dog(Animal):
    def __init__(self):
        Animal().__init__()
        print("dog created")
    def who_am_i(self):
        print("i am dog")

a = Dog()
a.eat()
a.who_am_i()
---------------------------------------------------------------------------------------------------------
' '.join(lst):

Purpose: This converts the list of words (lst) back into a single string, where each word is separated by a space (' ').
How it works:
The join() method concatenates all elements of the list (lst) into a single string.
The string ' ' specifies the separator between elements. In this case, it uses a space to join the words.

---------------------------------------------------------------------------------------------------------
 
#Saving Data (json.dump()):
json.dump() is used to serialize the Python dictionary (employee_data) and write it to the specified file (employee_data.json).
indent=4: This adds indentation to the JSON file for readability (pretty-printing).

try:
        with open(file_path, 'w', encoding='utf-8') as file:
            json.dump(data, file, indent=4)  # indent=4 for pretty formatting
        print(f"Data saved successfully to '{file_path}'.")
    except Exception as e:
        print(f"An error occurred while saving data to the JSON file: {e}")

#Loading Data (json.load()):
json.load() reads the JSON file and converts it back into a Python dictionary.
with open(file_path, 'r', encoding='utf-8') as file:
            data = json.load(file)  # Load the JSON data
        print(f"Data loaded successfully from '{file_path}'.")
        return data
---------------------------------------------------------------------------------------------------------
