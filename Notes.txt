

Variable Conventions

# valid names

numOfBoxes = 7
_num_of_boxes = 10 # this is a different variable than numOfBoxes
_NUM_OF_BOXES = 15 # a different variable as names are case sensitive
ownerName = “Atif"
ownerName2 = “Muneeba" # different, valid variable

# invalid names
2ownerName = “Saeeda" # cannot start with number.
# Only letter or underscore in the beginning
owner-name = “Bilal" # no hypen
owner name = “Umer" # no space allowed
# only alpha numeric and underscore

---------------------------------------------------------------------------------------------------------
#operator precedence
#PEMDAS (Parentheses->Power->Multiplication->Addition->Left to Right)
---------------------------------------------------------------------------------------------------------
#Random lib

import random
a = random.randint(1,7) # 1 and 7 are included
b = random.randrange(1,3) # 3 is not included
c = random.random() # floating point between 0.0 and 1.0 where 1.0 is not included
print(a, b, c)
j = [1,2,3,4]
x = random.choice(j) # Gives a random value
random.shuffle(j) #random.shuffle() shuffles the list, doesn't return anything
print(x)
print(j)
random.seed(42) #used to replicate same results
def print_random():
    for i in range(5):
        print(random.randint(1,100))
print_random()
---------------------------------------------------------------------------------------------------------
' '.join(lst):

Purpose: This converts the list of words (lst) back into a single string, where each word is separated by a space (' ').
How it works:
The join() method concatenates all elements of the list (lst) into a single string.
The string ' ' specifies the separator between elements. In this case, it uses a space to join the words.

---------------------------------------------------------------------------------------------------------
 
#Saving Data (json.dump()):
json.dump() is used to serialize the Python dictionary (employee_data) and write it to the specified file (employee_data.json).
indent=4: This adds indentation to the JSON file for readability (pretty-printing).

try:
        with open(file_path, 'w', encoding='utf-8') as file:
            json.dump(data, file, indent=4)  # indent=4 for pretty formatting
        print(f"Data saved successfully to '{file_path}'.")
    except Exception as e:
        print(f"An error occurred while saving data to the JSON file: {e}")

#Loading Data (json.load()):
json.load() reads the JSON file and converts it back into a Python dictionary.
with open(file_path, 'r', encoding='utf-8') as file:
            data = json.load(file)  # Load the JSON data
        print(f"Data loaded successfully from '{file_path}'.")
        return data
---------------------------------------------------------------------------------------------------------
